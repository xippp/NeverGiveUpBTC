//
//  MainpageViewController.swift
//  NeverGiveUpBTC
//
//  Created by Paul on 14/6/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire


class MainpageViewController: UIViewController
{
    
    
    var interactor: MainpageBusinessLogic?
    var router: (NSObjectProtocol & MainpageRoutingLogic & MainpageDataPassing)?
    var btcModel: BTCModel?
    var selectBTC: BTCModel.BPIData?
    var historyBTC: [BTCModel] = []
    
    //MARK: -IBOutlet Property
    
    @IBOutlet weak var btcCardcollectionView: UICollectionView! {
        didSet {
            let nib = UINib(nibName: "BTCCardCollectionViewCell", bundle: nil)
            btcCardcollectionView?.register(nib, forCellWithReuseIdentifier: "BTCCard")
            btcCardcollectionView.delegate = self
            btcCardcollectionView.dataSource = self
        }
    }
    @IBOutlet weak var inputAmountField: UITextField! {
        didSet {
            inputAmountField.keyboardType = .numberPad
            inputAmountField.delegate = self
        }
    }
    
    @IBOutlet weak var labelAmount: UILabel! {
        didSet {
            labelAmount.text = "Amount: 0.00"
        }
    }
    
    @IBOutlet weak var tableHistioryView: UITableView! {
        didSet {
            tableHistioryView.register(UINib(nibName: "HistoryBTCViewCell", bundle: nil), forCellReuseIdentifier: "HistoryCell")
            tableHistioryView.delegate = self
            tableHistioryView.dataSource = self
        }
    }
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainpageInteractor()
        let presenter = MainpagePresenter()
        let router = MainpageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupView()
        fetchBTCData()
        updateService()
        filter2Array()
    }
    
    func fetchBTCData() {
        let request = Mainpage.FetchBTCData.Request()
        interactor?.fetchBTCData(request: request)
    }
    
    func getBTCSelect(index: Int) {
        let request = Mainpage.GetDataSelect.Request(index: index)
        interactor?.getBTCSelect(request: request)
    }
    
    func calAmountBTC(amount: String, btcSelect: BTCModel.BPIData) {
        let request = Mainpage.CalAmountBTC.Request(btcSelect: btcSelect, amount: amount)
        interactor?.calAmountBTC(request: request)
    }
    
    //MARK: -Method
    
    func setupView() {
        // TextField
        let bar = UIToolbar()
        let doneBtn = UIBarButtonItem(title: "Done", style: .plain, target: self, action: #selector(dismissMyKeyboard))
        let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        bar.items = [flexSpace, flexSpace, doneBtn]
        bar.sizeToFit()
        inputAmountField.inputAccessoryView = bar
    }
    
    @objc func dismissMyKeyboard(){
        view.endEditing(true)
    }
    
    func alertWarning() {
        self.labelAmount.text = "Please Select BTC Card !"
        self.labelAmount.textColor = .red
    }
    
    func updateService() {
        let timer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { timer in
            self.fetchBTCData()
            print("call Service when 1 min")
        }
    }
    
    // Out Of Application
    
    // Bonus Test
    // Bonus 1
    func genFibonacci() {
        var fiboArray: [Int] = [0]
        let numStart = 1
        var sum = 0
        for num  in 0...20 {
            if num == 0 {
                sum = fiboArray[num] + 1
                fiboArray.append(sum)
            } else {
                sum = fiboArray[num] + fiboArray[num-1]
                fiboArray.append(sum)
            }
        }
        print(fiboArray)
    }
    
    // Bonus 2
    
    func genEvenNumber() {
        var evenArray: [Int] = []
        for num in 0...100 {
            if num % 2 != 0 {
                evenArray.append(num)
            }
        }
        print(evenArray)
    }
    
    // Bonus 3
    
    func filter2Array() {
        let array1 = [1,2,3,4,5,6,7,8,9,10]
        let array2 = [1,2,3,4,5,6,7,8,9,10]
        var filterArray: [Int] = []
        for num in array1 {
            for num2 in array2 {
                if num == num2 {
                    filterArray.append(num)
                }
            }
        }
        print(filterArray)
        
    }
    
}

protocol MainpageDisplayLogic: class
{
    func displayFetchedBTCData(viewModel: Mainpage.FetchBTCData.ViewModel)
    func displayGetBTCSelect(viewModel: Mainpage.GetDataSelect.ViewModel)
    func displayCalAmountBTC(viewModel: Mainpage.CalAmountBTC.ViewModel)
}

extension MainpageViewController: MainpageDisplayLogic {
    
    func displayFetchedBTCData(viewModel: Mainpage.FetchBTCData.ViewModel) {
        switch viewModel.value.responseStatus {
        case .success:
            self.btcModel = viewModel.value.responseData
            self.historyBTC = viewModel.historyBTC
            btcCardcollectionView.reloadData()
            tableHistioryView.reloadData()
            
        case .failure:
            print("Fail Call Service Get BTC Model!!")
        }
    }
    
    func displayGetBTCSelect(viewModel: Mainpage.GetDataSelect.ViewModel) {
        self.selectBTC = viewModel.btcSelect
    }
    
    func displayCalAmountBTC(viewModel: Mainpage.CalAmountBTC.ViewModel) {
        self.labelAmount.textColor = .black
        self.labelAmount.text = "Amount: \(viewModel.totalAmount)"
    }
    
}

extension MainpageViewController: UITextFieldDelegate {
    
    func textFieldDidEndEditing(_ textField: UITextField) {
        
        guard let btcSelect = selectBTC else {
            self.alertWarning()
            return
        }
        
        self.calAmountBTC(amount: inputAmountField.text ?? "", btcSelect: btcSelect)
    }
    
}

extension MainpageViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 3
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "BTCCard", for: indexPath) as! BTCCardCollectionViewCell
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.maximumFractionDigits = 4
        if indexPath.row == 0 {
            formatter.locale = Locale(identifier: "en_US")
            let balance = Double(self.btcModel?.bpi.usd.rateFloat ?? 0.0) as NSNumber
            cell.setCurrency = self.btcModel?.bpi.usd.code
            cell.setAmount = formatter.string(from: balance) ?? ""
            cell.setDescription = self.btcModel?.bpi.usd.description
            cell.setUpdate = self.btcModel?.timeList.updated
        } else if indexPath.row == 1 {
            formatter.locale = Locale(identifier: "en_UK")
            let balance = Double(self.btcModel?.bpi.usd.rateFloat ?? 0.0) as NSNumber
            cell.setCurrency = self.btcModel?.bpi.gbp.code
            cell.setAmount = formatter.string(from: balance) ?? ""
            cell.setDescription = self.btcModel?.bpi.gbp.description
            cell.setUpdate = self.btcModel?.timeList.updated
        } else if indexPath.row == 2 {
            formatter.locale = Locale(identifier: "en_IE")
            let balance = Double(self.btcModel?.bpi.usd.rateFloat ?? 0.0) as NSNumber
            cell.setCurrency = self.btcModel?.bpi.eur.code
            cell.setAmount = formatter.string(from: balance) ?? ""
            cell.setDescription = self.btcModel?.bpi.eur.description
            cell.setUpdate = self.btcModel?.timeList.updated
        }
            
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .centeredHorizontally)
        self.getBTCSelect(index: indexPath.row)
    }
}

extension MainpageViewController: UITableViewDelegate, UITableViewDataSource {
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.historyBTC.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableHistioryView.dequeueReusableCell(withIdentifier: "HistoryCell", for: indexPath) as! HistoryBTCViewCell
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.maximumFractionDigits = 4
        formatter.locale = Locale(identifier: "en_US")
        let balanceUSD = Double(self.historyBTC[indexPath.row].bpi.usd.rateFloat ) as NSNumber
        let balanceGBP = Double(self.historyBTC[indexPath.row].bpi.usd.rateFloat ) as NSNumber
        let balanceEUR = Double(self.historyBTC[indexPath.row].bpi.usd.rateFloat ) as NSNumber
        cell.setCurrency1 = "\(self.historyBTC[indexPath.row].bpi.usd.code): \(formatter.string(from: balanceUSD) ?? "")"
        cell.setCurrency2 = "\(self.historyBTC[indexPath.row].bpi.gbp.code): \(formatter.string(from: balanceGBP) ?? "")"
        cell.setCurrency3 = "\(self.historyBTC[indexPath.row].bpi.eur.code): \(formatter.string(from: balanceEUR) ?? "")"
        cell.setUpdate = "\(self.historyBTC[indexPath.row].timeList.updated)"
        
        return cell
        
    }
    
    
    
    
}

//
//  MainpageInteractor.swift
//  NeverGiveUpBTC
//
//  Created by Paul on 14/6/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainpageBusinessLogic
{
    func fetchBTCData(request: Mainpage.FetchBTCData.Request)
    func getBTCSelect(request: Mainpage.GetDataSelect.Request)
    func calAmountBTC(request: Mainpage.CalAmountBTC.Request)
}

protocol MainpageDataStore
{
    var historyBTC: [BTCModel] { get set }
}

class MainpageInteractor: MainpageBusinessLogic, MainpageDataStore
{
  var presenter: MainpagePresentationLogic?
  var worker =  MainpageWorker()
    var btcModel: BTCModel?
    var historyBTC: [BTCModel] = []
  
  // MARK: Do something

    func fetchBTCData(request: Mainpage.FetchBTCData.Request) {
        worker.fetchBTCService(completion: { [weak self] (value) in
            self?.btcModel = value.responseData
            self?.historyBTC.append(value.responseData)
            let response = Mainpage.FetchBTCData.Response(value: value, historyBTC: self?.historyBTC ?? [])
            self?.presenter?.presentFetchedBTCData(response: response)
        })
    }
    
    func getBTCSelect(request: Mainpage.GetDataSelect.Request) {
        var btcSelect: BTCModel.BPIData
        guard let btcModel = btcModel else { return }
        btcSelect = btcModel.bpi.usd // default
        if request.index == 0 {
            btcSelect = btcModel.bpi.usd
        } else if request.index == 1 {
            btcSelect = btcModel.bpi.gbp
        } else if request.index == 2 {
            btcSelect = btcModel.bpi.eur
        }
        let response = Mainpage.GetDataSelect.Response(btcSelect: btcSelect)
        presenter?.presentGetBTCSelect(response: response)
    }
    
    func calAmountBTC(request: Mainpage.CalAmountBTC.Request) {
        let formatter = NumberFormatter()
        formatter.numberStyle = .currency
        formatter.maximumFractionDigits = 4
        if request.btcSelect.code == "USD" {
            formatter.locale = Locale(identifier: "en_Us")
        } else if request.btcSelect.code == "GBP" {
            formatter.locale = Locale(identifier: "en_UK")
        }else if request.btcSelect.code == "EUR" {
            formatter.locale = Locale(identifier: "en_IE")
        }
        let amountcal = Double(request.amount) ?? 0.0
        var sumAmount = amountcal * request.btcSelect.rateFloat as NSNumber
        let totalAmount = formatter.string(from: sumAmount) ?? ""
        let response = Mainpage.CalAmountBTC.Response(totalAmount: totalAmount)
        presenter?.presentCalAmountBTC(response: response)
    }
    

    
}
